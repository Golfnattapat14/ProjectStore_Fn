import React, { useState, useRef, useEffect, type ChangeEvent } from "react";
import { useNavigate, Link } from "react-router-dom";
import type { ProductRequest, ProductResponse } from "../StoreApi";
import { addNewProduct, getProducts } from "../StoreApi";
import "../UserPage.css";

const SellerPage: React.FC = () => {
  const [query, setQuery] = useState<string>("");
  const inputRef = useRef<HTMLInputElement>(null);
  const [message, setMessage] = useState<string>("");
  const [products, setProducts] = useState<ProductResponse[]>([]);
  const navigate = useNavigate();

  const [, setLoading] = useState<boolean>(false);
  const [, setError] = useState<string>("");

  useEffect(() => {
    setLoading(true);
    getProducts()
      .then((data) => {
        setProducts(data);
        setError("");
      })
      .catch((err) => setError(err.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"))
      .finally(() => setLoading(false));
  }, []);

  const getProductTypeName = (type: number) => {
    switch (type) {
      case 0:
        return "‡∏≠‡∏≤‡∏´‡∏≤‡∏£";
      case 1:
        return "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ";
      case 2:
        return "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°";
      case 3:
        return "‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô";
      default:
        return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ";
    }
  };

  const [newProduct, setNewProduct] = useState<Partial<ProductRequest>>({
    ProductName: "",
    ProductPrice: 0,
    ProductType: 0,
    Quantity: 0,
    CreateBy: "Seller",
    IsActive: true,
  });

  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    setQuery(event.target.value);
  };
  const handleSearchClick = () => {
    if (inputRef.current) {
      // wait for Search api
    }
  };
  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter") {
      handleSearchClick();
    }
  };

  const handleNewProductChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewProduct((prev: Partial<ProductRequest>) => ({
      ...prev,
      [name]:
        name === "ProductPrice" || name === "Quantity" || name === "ProductType"
          ? Number(value)
          : value,
    }));
  };

  const handleAddProduct = async () => {
    try {
      setMessage("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...");
      if (!newProduct.ProductName || newProduct.ProductType === undefined) {
        setMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
        return;
      }
      if ((newProduct.ProductPrice ?? 0) <= 0) {
        setMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        return;
      }
      if ((newProduct.Quantity ?? 0) <= 0) {
        setMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        return;
      }

      const added = await addNewProduct(newProduct as ProductRequest);
      setMessage(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ${added.productName}`);
      setNewProduct({
        ProductName: "",
        ProductPrice: 0,
        ProductType: 0,
        Quantity: 0,
        CreateBy: "seller_user",
        IsActive: true,
      });
    } catch (error: unknown) {
      if (error instanceof Error) {
        setMessage(error.message);
      } else {
        setMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏");
      }
    }
  };

  return (
    <>
      <nav>
        <li>
          <Link className="read-the-docs" to="/">
            Sign Out
          </Link>
        </li>
      </nav>
      <h1>üì¶ Seller Panel</h1>
      <h2>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì / ‡∏î‡∏π‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</h2>

      <div>
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ..."
          value={query}
          onChange={handleChange}
          onKeyDown={handleKeyDown}
          ref={inputRef}
        />
        <button onClick={handleSearchClick}>Search</button>
      </div>

      <div className="seller-panel">
        <h3>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà</h3>

        <label htmlFor="ProductName">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
        <input
          id="productName"
          type="text"
          name="ProductName"
          placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
          value={newProduct.ProductName ?? ""}
          onChange={handleNewProductChange}
        />

        <label htmlFor="ProductPrice">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
        <input
          id="ProductPrice"
          type="number"
          name="ProductPrice"
          placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
          value={newProduct.ProductPrice ?? 0}
          onChange={handleNewProductChange}
        />

        <label htmlFor="ProductType">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
        <input
          id="ProductType"
          type="number"
          name="ProductType"
          placeholder="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
          value={newProduct.ProductType ?? 0}
          onChange={handleNewProductChange}
        />

        <label htmlFor="Quantity">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
        <input
          id="Quantity"
          type="number"
          name="Quantity"
          placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
          value={newProduct.Quantity ?? 0}
          onChange={handleNewProductChange}
        />

        <button onClick={handleAddProduct}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</button>

        {message && <p className="message">{message}</p>}
      </div>

      <div className="table-container">
        <table>
          <thead>
            <tr>
              <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà</th>
              <th>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
              <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢</th>
              <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
              <th>‡∏£‡∏≤‡∏Ñ‡∏≤</th>
              <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
              <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {products.map((p, index) => {
              const key = p.id ?? `${p.productName}-${index}`;
              return (
                <tr key={key}>
                  <td>{index + 1}</td>
                  <td>{p.productName}</td>
                  <td>{new Date(p.createDate).toLocaleDateString()}</td>
                  <td>{getProductTypeName(p.productType ?? 0)}</td>
                  <td>{p.productPrice} ‡∏ö‡∏≤‡∏ó</td>
                  <td>{p.quantity}</td>
                  <td>
                    <button
                      onClick={() => {
                        if (p.id) {
                          navigate(`/seller/edit/${p.id}`);
                        } else {
                          alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ");
                        }
                      }}
                    >
                      ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    </button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </>
  );
};

export default SellerPage;
