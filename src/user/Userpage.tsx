import React, { useState, useRef, useEffect, type ChangeEvent } from "react"; // ‡πÄ‡∏û‡∏¥‡πà‡∏° useEffect
import { Link } from "react-router-dom";
import type { ProductRequest } from "../StoreApi";
import { addNewProduct, getProducts, type ProductResponse } from "../StoreApi";
import "./UserPage.css";

interface SearchBarProps {
  onSearch?: (query: string) => void;
  placeholder?: string;
  role: "Admin" | "Seller" | "Buyer";
}

const User: React.FC<SearchBarProps> = ({
  onSearch = () => {},
  placeholder = "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ...",
  role,
}) => {
  const [query, setQuery] = useState<string>("");
  const inputRef = useRef<HTMLInputElement>(null);
  const [message, setMessage] = useState<string>("");
  const [products, setProducts] = useState<ProductResponse[]>([]);

  useEffect(() => {
    getProducts()
      .then(setProducts)
      .catch((err) => {
        setMessage(err.message || "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      });
  }, []);

  const getProductTypeName = (type: number) => {
    switch (type) {
      case 0:
        return "‡∏≠‡∏≤‡∏´‡∏≤‡∏£";
      case 1:
        return "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ";
      case 2:
        return "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°";
      case 3:
        return "‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô";
      default:
        return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ";
    }
  };

  const [newProduct, setNewProduct] = useState<Partial<ProductRequest>>({
    ProductName: "",
    ProductPrice: 0,
    ProductType: 0,
    Quantity: 0,
    CreateBy: "Seller",
    IsActive: true,
  });

  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    setQuery(event.target.value);
  };
  const handleSearchClick = () => {
    if (inputRef.current) {
      onSearch(query);
    }
  };
  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter") {
      handleSearchClick();
    }
  };

  const handleNewProductChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewProduct((prev: Partial<ProductRequest>) => ({
      ...prev,
      [name]:
        name === "ProductPrice" || name === "Quantity" || name === "ProductType"
          ? Number(value)
          : value,
    }));
  };

  const handleAddProduct = async () => {
    try {
      setMessage("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...");
      if (!newProduct.ProductName || newProduct.ProductType === undefined) {
        setMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
        return;
      }
      if ((newProduct.ProductPrice ?? 0) <= 0) {
        setMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        return;
      }
      if ((newProduct.Quantity ?? 0) <= 0) {
        setMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        return;
      }

      const added = await addNewProduct(newProduct as ProductRequest);
      setMessage(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ${added.productName}`);
      setNewProduct({
        ProductName: "",
        ProductPrice: 0,
        ProductType: 0,
        Quantity: 0,
        CreateBy: "seller_user",
        IsActive: true,
      });
    } catch (error: unknown) {
      if (error instanceof Error) {
        setMessage(error.message);
      } else {
        setMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏");
      }
    }
  };

  function handleToggleChange(id: string) {
    setProducts((prev) =>
      prev.map((p) => (p.Id === id ? { ...p, isActive: !p.isActive } : p))
    );
  }

  
  return (
    <>
      <nav>
        <li>
          <Link className="read-the-docs" to="/">
            Sign Out
          </Link>
        </li>
      </nav>

      <h1>Welcome {role.toUpperCase()} to Store</h1>

      {role === "Admin" && (
        <div>
          <h1>üìä Admin Dashboard</h1>
          <h3>‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î / ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö</h3>
          <div>
            <input
              type="text"
              placeholder={placeholder}
              value={query}
              onChange={handleChange}
              onKeyDown={handleKeyDown}
              ref={inputRef}
            />
            <button onClick={handleSearchClick}>Search</button>
          </div>
          <div className="table-container">
            <table>
              <thead>
                <tr>
                  <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà</th>
                  <th>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                  <th>‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡πÇ‡∏î‡∏¢</th>
                  <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢</th>
                  <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                  <th>‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                  <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {products.map((p, index) => (
                  <tr key={p.Id}>
                    <td>{index + 1}</td>
                    <td>{p.productName}</td>
                    <td>{p.createBy}</td>
                    <td>{new Date(p.createDate).toLocaleDateString()}</td>
                    <td>{getProductTypeName(p.productType ?? 0)}</td>
                    <td>{p.productPrice} ‡∏ö‡∏≤‡∏ó</td>
                    <td>
                      <label className="toggle-switch">
                        <input
                          type="checkbox"
                          checked={p.isActive ?? false}
                          onChange={() => handleToggleChange(p.Id)}
                        />
                        <span className="slider round"></span>
                      </label>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {role === "Seller" && (
        <div>
          <nav>
            <li>
              <Link className="read-the-docs" to="/">
                Sign Out
              </Link>
            </li>
          </nav>
          <h1>üì¶ Seller Panel</h1>
          <h2>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì / ‡∏î‡∏π‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</h2>

          <div>
            <input
              type="text"
              placeholder={placeholder}
              value={query}
              onChange={handleChange}
              onKeyDown={handleKeyDown}
              ref={inputRef}
            />
            <button onClick={handleSearchClick}>Search</button>
          </div>

          <div className="seller-panel">
            <h3>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà</h3>

            <label htmlFor="ProductName">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
            <input
              id="productName"
              type="text"
              name="ProductName"
              placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
              value={newProduct.ProductName ?? ""}
              onChange={handleNewProductChange}
            />

            <label htmlFor="ProductPrice">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
            <input
              id="ProductPrice"
              type="number"
              name="ProductPrice"
              placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
              value={newProduct.ProductPrice ?? 0}
              onChange={handleNewProductChange}
            />

            <label htmlFor="ProductType">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
            <input
              id="ProductType"
              type="number"
              name="ProductType"
              placeholder="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
              value={newProduct.ProductType ?? 0}
              onChange={handleNewProductChange}
            />

            <label htmlFor="Quantity">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
            <input
              id="Quantity"
              type="number"
              name="Quantity"
              placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
              value={newProduct.Quantity ?? 0}
              onChange={handleNewProductChange}
            />

            <button onClick={handleAddProduct}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</button>

            {message && <p className="message">{message}</p>}
          </div>

          <div className="table-container">
            <table>
              <thead>
                <tr>
                  <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà</th>
                  <th>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                  <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢</th>
                  <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                  <th>‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                  <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {products.map((p, index) => (
                  <tr key={p.Id}>
                    <td>{index + 1}</td>
                    <td>{p.productName}</td>
                    <td>{new Date(p.createDate).toLocaleDateString()}</td>
                    <td>{getProductTypeName(p.productType ?? 0)}</td>{" "}
                    <td>{p.productPrice} ‡∏ö‡∏≤‡∏ó</td>
                    <td>{p.quantity}</td>
                    <td>
                      <button>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                      <button>‡∏•‡∏ö</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {role === "Buyer" && (
        <div>
          <h1>üõí Store Shop</h1>
          <h2>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ / ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</h2>
          <div>
            <input
              type="text"
              placeholder={placeholder}
              value={query}
              onChange={handleChange}
              onKeyDown={handleKeyDown}
              ref={inputRef}
            />
            <button onClick={handleSearchClick}>Search</button>
          </div>
          <div className="table-container">
            <table>
              <thead>
                <tr>
                  <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà</th>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                  <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢</th>
                  <th>‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡πÇ‡∏î‡∏¢</th>
                  <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                  <th>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
                  <th>‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                {products.map((p, index) => (
                  <tr key={p.Id ?? `${p.productName}-${index}`}>
                    <td>{index + 1}</td>
                    <td>{p.productName}</td>
                    <td>{new Date(p.createDate).toLocaleDateString()}</td>
                    <td>{p.createBy}</td>
                    <td>{getProductTypeName(p.productType ?? 0)}</td>
                    <td>{p.quantity}</td>
                    <td>{p.productPrice} ‡∏ö‡∏≤‡∏ó</td>
                    <td>
                      <button>‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏™‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </>
  );
};

export default User;
